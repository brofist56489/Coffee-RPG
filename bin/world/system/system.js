// Generated by CoffeeScript 1.7.1
var BounceSystem, ControlSystem, MoveSystem, System;

System = (function() {
  System.prototype.world = null;

  function System() {
    return;
  }

  System.prototype.update = function() {};

  System.prototype.render = function() {};

  return System;

})();

ControlSystem = (function() {
  function ControlSystem() {}

  ControlSystem.prototype.update = function() {
    var entities;
    entities = this.world.getEntities(["Controllable"]);
    return entities.forEach(function(ent) {
      var comp, vel;
      comp = ent.getComponent("Controllable");
      vel = vec2.create();
      if (Input.Keys.isKeyDown(comp.up)) {
        vel[1] = -2;
      }
      if (Input.Keys.isKeyDown(comp.down)) {
        vel[1] = 2;
      }
      if (Input.Keys.isKeyDown(comp.left)) {
        vel[0] = -2;
      }
      if (Input.Keys.isKeyDown(comp.right)) {
        vel[0] = 2;
      }
      return ent.vel = vel;
    });
  };

  return ControlSystem;

})();

MoveSystem = (function() {
  function MoveSystem() {}

  MoveSystem.prototype.update = function() {
    var entities;
    entities = this.world.getEntities(["Moveable"]);
    entities.forEach(function(ent) {
      var col;
      vec2.add(ent.vel, ent.vel, vec2.clone([Math.random() * 2 - 1, Math.random() * 2 - 1]));
      vec2.add(ent.pos, ent.pos, ent.vel);
      col = ent.getComponent("Color");
      if (col != null) {
        return ent.pos = vec2.clone([427, 240]);
      }
    });
  };

  return MoveSystem;

})();

BounceSystem = (function() {
  function BounceSystem() {}

  BounceSystem.prototype.update = function() {
    var entities;
    entities = this.world.getEntities(["Moveable"]);
    return entities.forEach(function(ent) {
      return vec2.clamp(ent.pos, ent.pos, [0, 0], [822, 448]);
    });
  };

  return BounceSystem;

})();
