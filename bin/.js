// Generated by CoffeeScript 1.6.3
(function() {
  var Draw, DrawUtil, Entity, Game, GameTimer, MESHES, Mesh, SHADERS, Shader, ShaderUniform, ShaderUniformType, ShaderUniformTypeMethods, System, gl, initMeshes, main;

  Draw = (function() {
    function Draw() {}

    Draw.clear = function(col) {
      if (col == null) {
        col = [0, 0, 0, 1];
      }
      gl.clearColor(col[0], col[1], col[2], col[3]);
      return gl.clear(gl.COLOR_BUFFER_BIT);
    };

    Draw.setColor = function(color) {
      DrawUtil.shader.uniforms["color"].set(color);
    };

    Draw.rect = function(x, y, w, h, r) {
      var mat;
      if (r == null) {
        r = 0;
      }
      mat = mat4.create();
      mat4.identity(mat);
      mat4.translate(mat, mat, vec3.clone([x, y, 0]));
      if (r !== 0) {
        mat4.translate(mat, mat, vec3.clone([w / 2, h / 2, 0]));
        mat4.rotateZ(mat, mat, r);
        mat4.translate(mat, mat, vec3.clone([-w / 2, -h / 2, 0]));
      }
      mat4.scale(mat, mat, vec3.clone([w, h, 1]));
      MESHES.QUAD.render(mat);
    };

    return Draw;

  })();

  Game = (function() {
    Game.prototype.running = false;

    Game.prototype.timer = null;

    Game.prototype.v = 0;

    function Game() {
      return;
    }

    Game.prototype.start = function() {
      this.timer = new GameTimer(this);
      this.running = true;
      return this.timer.start();
    };

    Game.prototype.update = function() {
      this.v += 0.01;
    };

    Game.prototype.render = function() {
      var i, _i;
      Draw.setColor(vec4.clone([1, 1, 1, 1]));
      Draw.clear([0, 0, 0, 1]);
      for (i = _i = 0; _i < 1; i = ++_i) {
        Draw.rect((i % 10) * 50, Math.floor(i / 10) * 50, 50, 50);
      }
      Draw.rect(75, 0, 50, 50);
    };

    return Game;

  })();

  GameTimer = (function() {
    GameTimer.prototype.lt = 0;

    GameTimer.prototype.now = 0;

    GameTimer.prototype.delta = 0;

    GameTimer.prototype.ltr = 0;

    GameTimer.prototype.ticks = 0;

    GameTimer.prototype.frames = 0;

    GameTimer.prototype.mspt = 0;

    GameTimer.prototype.game = null;

    GameTimer.prototype.callback = null;

    GameTimer.prototype.start = function() {
      return window.requestAnimationFrame(this.callback);
    };

    GameTimer.prototype.getMillis = function() {
      return new Date().getTime();
    };

    function GameTimer(game) {
      var _this = this;
      this.game = game;
      this.lt = this.getMillis();
      this.now = this.lt;
      this.ltr = this.lt;
      this.mspt = 60.0 / 1000.0;
      this.callback = function(time) {
        return _this.update();
      };
    }

    GameTimer.prototype.update = function() {
      this.now = this.getMillis();
      this.delta += (this.now - this.lt) * this.mspt;
      this.lt = this.now;
      if (this.delta >= 10) {
        this.delta = 10;
      }
      while (this.delta >= 1) {
        this.game.update();
        this.ticks++;
        this.delta--;
      }
      this.game.render();
      this.frames++;
      if (this.now - this.ltr >= 1000) {
        this.ltr += 1000;
        this.ticks = 0;
        this.frames = 0;
      }
      if (this.game.running) {
        return window.requestAnimationFrame(this.callback);
      }
    };

    return GameTimer;

  })();

  main = function() {
    DrawUtil.initGlContext();
    return new Game().start();
  };

  window.startGameMethod = main;

  gl = null;

  DrawUtil = (function() {
    function DrawUtil() {}

    DrawUtil.canvas = null;

    DrawUtil.WIDTH = 360;

    DrawUtil.HEIGHT = 202;

    DrawUtil.shader = null;

    DrawUtil.initGlContext = function() {
      this.canvas = $("#gameCanvas")[0];
      this.canvas.width = this.WIDTH;
      this.canvas.height = this.HEIGHT;
      gl = this.__getGlContext();
      if (gl != null) {
        this.setupGlContext();
        this.setupShaders();
        return initMeshes();
      }
    };

    DrawUtil.__getGlContext = function() {
      return this.canvas.getContext("webgl") || this.canvas.getContext("experimental-webgl");
    };

    DrawUtil.setupGlContext = function() {
      gl.viewport(0, 0, this.WIDTH, this.HEIGHT);
      gl.disable(gl.DEPTH_TEST);
      return gl.disable(gl.CULL_FACE);
    };

    DrawUtil.setupShaders = function() {
      var camMat, viewMat;
      console.log(this.initShaders());
      this.shader = SHADERS[0].use();
      viewMat = mat4.create();
      mat4.identity(viewMat);
      mat4.ortho(viewMat, 0, this.WIDTH, this.HEIGHT, 0, -1, 1);
      this.shader.uniforms["viewMatrix"].set(viewMat);
      camMat = mat4.create();
      mat4.identity(camMat);
      mat4.translate(camMat, camMat, vec3.clone([0, 0, 0]));
      this.shader.uniforms["cameraMatrix"].set(camMat);
    };

    DrawUtil.initShaders = function() {
      var shader, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = SHADERS.length; _i < _len; _i++) {
        shader = SHADERS[_i];
        shader.getShaderCode(shader.vertexShaderCode, shader.fragmentShaderCode);
        if (!shader.compile()) {
          throw "Poop!";
        }
        _results.push(shader.setupAttribs());
      }
      return _results;
    };

    return DrawUtil;

  })();

  Mesh = (function() {
    function Mesh() {}

    Mesh.prototype.vertexBuffer = null;

    Mesh.prototype.indexBuffer = null;

    Mesh.prototype.size = null;

    Mesh.prototype.setVertices = function(vert, ind) {
      if (this.vertexBuffer == null) {
        this.vertexBuffer = gl.createBuffer();
      }
      if (this.indexBuffer == null) {
        this.indexBuffer = gl.createBuffer();
      }
      gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vert), gl.STATIC_DRAW);
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Int16Array(ind), gl.STATIC_DRAW);
      this.size = ind.length;
      return this;
    };

    Mesh.prototype.render = function(mat) {
      var shader;
      shader = DrawUtil.shader;
      shader.uniforms["objectMatrix"].set(mat);
      gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
      gl.vertexAttribPointer(shader.attributes[0], 2, gl.FLOAT, false, 16, 0);
      gl.vertexAttribPointer(shader.attributes[1], 2, gl.FLOAT, false, 16, 8);
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
      return gl.drawElements(gl.TRIANGLES, this.size, gl.UNSIGNED_SHORT, 0);
    };

    return Mesh;

  })();

  MESHES = {
    "QUAD": new Mesh()
  };

  initMeshes = function() {
    return MESHES.QUAD.setVertices([0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0], [0, 1, 2, 0, 2, 3]);
  };

  Shader = (function() {
    Shader.prototype.vertexShader = null;

    Shader.prototype.fragmentShader = null;

    Shader.prototype.vertexShaderCode = "";

    Shader.prototype.fragmentShaderCode = "";

    Shader.prototype.program = null;

    Shader.prototype.attributes = [-1, -1];

    Shader.prototype.uniforms = {};

    function Shader(vert, frag) {
      this.vertexShaderCode = vert;
      this.fragmentShaderCode = frag;
    }

    Shader.prototype.getShaderCode = function(vertex_id, fragment_id) {
      this.vertexShaderCode = $("#" + vertex_id)[0].innerText;
      console.log(this.vertexShaderCode);
      this.fragmentShaderCode = $("#" + fragment_id)[0].innerText;
      return console.log(this.fragmentShaderCode);
    };

    Shader.prototype.compile = function() {
      if (gl == null) {
        return;
      }
      this.vertexShader = gl.createShader(gl.VERTEX_SHADER);
      gl.shaderSource(this.vertexShader, this.vertexShaderCode);
      gl.compileShader(this.vertexShader);
      if (!gl.getShaderParameter(this.vertexShader, gl.COMPILE_STATUS)) {
        throw gl.getShaderInfoLog(this.vertexShader);
        return false;
      }
      this.fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
      gl.shaderSource(this.fragmentShader, this.fragmentShaderCode);
      gl.compileShader(this.fragmentShader);
      if (!gl.getShaderParameter(this.fragmentShader, gl.COMPILE_STATUS)) {
        throw gl.getShaderInfoLog(this.fragmentShader);
        return false;
      }
      this.program = gl.createProgram();
      gl.attachShader(this.program, this.vertexShader);
      gl.attachShader(this.program, this.fragmentShader);
      gl.linkProgram(this.program);
      if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {
        throw gl.getProgramInfoLog(this.program);
        return false;
      }
      return true;
    };

    Shader.prototype.setupAttribs = function() {
      this.attributes[0] = gl.getAttribLocation(this.program, "aPos");
      this.attributes[1] = gl.getAttribLocation(this.program, "aTexCoord");
      this.uniforms["viewMatrix"] = new ShaderUniform(this.program, "uViewMatrix", ShaderUniformType.MATRIX_4);
      this.uniforms["cameraMatrix"] = new ShaderUniform(this.program, "uCameraMatrix", ShaderUniformType.MATRIX_4);
      this.uniforms["objectMatrix"] = new ShaderUniform(this.program, "uObjectMatrix", ShaderUniformType.MATRIX_4);
      this.uniforms["color"] = new ShaderUniform(this.program, "uColor", ShaderUniformType.VECTOR_4);
      return this;
    };

    Shader.prototype.use = function() {
      gl.useProgram(this.program);
      gl.enableVertexAttribArray(this.attributes[0]);
      gl.enableVertexAttribArray(this.attributes[1]);
      return this;
    };

    return Shader;

  })();

  SHADERS = [new Shader("basic-vs", "basic-fs")];

  ShaderUniformType = {
    VECTOR_3: 0,
    VECTOR_4: 1,
    VECTOR_2: 2,
    MATRIX_4: 3
  };

  ShaderUniformTypeMethods = [
    function(uni, val) {
      return gl.uniform3fv(uni, val);
    }, function(uni, val) {
      return gl.uniform4fv(uni, val);
    }, function(uni, val) {
      return gl.uniform2fv(uni, val);
    }, function(uni, val) {
      return gl.uniformMatrix4fv(uni, false, val);
    }
  ];

  ShaderUniform = (function() {
    ShaderUniform.prototype.name = "";

    ShaderUniform.prototype.type = -1;

    ShaderUniform.prototype.uniform = null;

    ShaderUniform.prototype.value = null;

    function ShaderUniform(prog, name, type) {
      this.name = name;
      this.type = type;
      this.uniform = gl.getUniformLocation(prog, this.name);
    }

    ShaderUniform.prototype.set = function(val) {
      this.val = val;
      return ShaderUniformTypeMethods[this.type](this.uniform, val);
    };

    return ShaderUniform;

  })();

  Entity = (function() {
    Entity.prototype.components = [];

    function Entity() {
      return;
    }

    Entity.prototype.update = function() {};

    Entity.prototype.render = function() {};

    return Entity;

  })();

  System = (function() {
    System.prototype.entities = [];

    function System() {
      return;
    }

    System.prototype.update = function() {};

    System.prototype.render = function() {};

    return System;

  })();

}).call(this);
