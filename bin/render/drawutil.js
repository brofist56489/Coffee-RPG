// Generated by CoffeeScript 1.7.1
var DrawUtil, gl;

gl = null;

DrawUtil = (function() {
  function DrawUtil() {}

  DrawUtil.canvas = null;

  DrawUtil.WIDTH = 854;

  DrawUtil.HEIGHT = 480;

  DrawUtil.shader = null;

  DrawUtil.initGlContext = function() {
    this.canvas = $("#gameCanvas")[0];
    this.canvas.width = this.WIDTH;
    this.canvas.height = this.HEIGHT;
    gl = this.__getGlContext();
    if (gl != null) {
      this.setupGlContext();
      this.setupShaders();
      return initMeshes();
    }
  };

  DrawUtil.__getGlContext = function() {
    return this.canvas.getContext("webgl") || this.canvas.getContext("experimental-webgl");
  };

  DrawUtil.setupGlContext = function() {
    gl.viewport(0, 0, this.WIDTH, this.HEIGHT);
    gl.disable(gl.DEPTH_TEST);
    return gl.disable(gl.CULL_FACE);
  };

  DrawUtil.setupShaders = function() {
    var camMat, texMat, viewMat;
    this.initShaders();
    this.shader = SHADERS[0].use();
    viewMat = mat4.create();
    mat4.identity(viewMat);
    mat4.ortho(viewMat, 0, this.WIDTH, this.HEIGHT, 0, -1, 1);
    this.shader.uniformViewMatrix.set(viewMat);
    camMat = mat4.create();
    mat4.identity(camMat);
    mat4.translate(camMat, camMat, vec3.clone([0, 0, 0]));
    this.shader.uniformCameraMatrix.set(camMat);
    texMat = mat4.create();
    mat4.identity(texMat);
    this.shader.uniformTextureMatrix.set(texMat);
  };

  DrawUtil.initShaders = function() {
    var shader, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = SHADERS.length; _i < _len; _i++) {
      shader = SHADERS[_i];
      shader.getShaderCode(shader.vertexShaderCode, shader.fragmentShaderCode);
      if (!shader.compile()) {
        throw "Shaders not loaded correctly";
      }
      _results.push(shader.setupAttribs());
    }
    return _results;
  };

  return DrawUtil;

})();
