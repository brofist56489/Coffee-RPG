// Generated by CoffeeScript 1.7.1
var Game, GameTimer;

Game = (function() {
  Game.prototype.running = false;

  Game.prototype.timer = null;

  Game.prototype.v = 0;

  function Game() {
    initializeGame();
    return;
  }

  Game.prototype.start = function() {
    Assets.Textures.loadAll();
    this.timer = new GameTimer(this);
    this.running = true;
    return this.timer.start();
  };

  Game.prototype.update = function() {
    this.v += 0.01;
  };

  Game.prototype.render = function() {
    var i, _i;
    Assets.Textures.get("test").use();
    Draw.clear([0, 0, 0, 1]);
    Draw.setColor(vec4.clone([0, 1, 0, 1]));
    for (i = _i = 0; _i < 40; i = ++_i) {
      Draw.rect((i % 10) * 50 + Math.cos(this.v * Math.PI) * 50, Math.floor(i / 10) * 50 + Math.sin(this.v * Math.PI) * 50, 45, 45);
    }
    Draw.setColor(vec4.clone([0, 0, 1, 1]));
    Draw.rect(50 + Math.cos(this.v * Math.PI) * 50, 50 + Math.sin(this.v * Math.PI) * 50, 45, 45);
  };

  return Game;

})();

GameTimer = (function() {
  GameTimer.prototype.lt = 0;

  GameTimer.prototype.now = 0;

  GameTimer.prototype.delta = 0;

  GameTimer.prototype.ltr = 0;

  GameTimer.prototype.ticks = 0;

  GameTimer.prototype.frames = 0;

  GameTimer.prototype.mspt = 0;

  GameTimer.prototype.game = null;

  GameTimer.prototype.callback = null;

  GameTimer.prototype.start = function() {
    return window.requestAnimationFrame(this.callback);
  };

  GameTimer.prototype.getMillis = function() {
    return new Date().getTime();
  };

  function GameTimer(game) {
    this.game = game;
    this.lt = this.getMillis();
    this.now = this.lt;
    this.ltr = this.lt;
    this.mspt = 60.0 / 1000.0;
    this.callback = (function(_this) {
      return function(time) {
        return _this.update();
      };
    })(this);
  }

  GameTimer.prototype.update = function() {
    this.now = this.getMillis();
    this.delta += (this.now - this.lt) * this.mspt;
    this.lt = this.now;
    if (this.delta >= 10) {
      this.delta = 10;
    }
    while (this.delta >= 1) {
      this.game.update();
      this.ticks++;
      this.delta--;
    }
    this.game.render();
    this.frames++;
    if (this.now - this.ltr >= 1000) {
      this.ltr += 1000;
      console.log("" + this.ticks + " tps, " + this.frames + " fps");
      this.ticks = 0;
      this.frames = 0;
    }
    if (this.game.running) {
      return window.requestAnimationFrame(this.callback);
    }
  };

  return GameTimer;

})();
